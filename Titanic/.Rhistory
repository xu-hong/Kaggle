set.seed(1234)
titanic.tune.7 <- train(Fate ~ Sex + Class + Deck + I(Embarked == "S") +
Title + Family + Age +
Fare.pp,
data = df.train.batch,
trControl = cv.ctrl,
method = "glm",
metric = "ROC")
titanic.tune.7
summary(titanic.tune.7)
set.seed(1234)
titanic.tune.8 <- train(Fate ~ Sex + Class + Deck + I(Embarked == "S") +
Title + Family + Age +
Side,
data = df.train.batch,
trControl = cv.ctrl,
method = "glm",
metric = "ROC")
titanic.tune.8
summary(titanic.tune.8)
set.seed(1234)
titanic.tune.9 <- train(Fate ~ Sex + Class + Deck + I(Embarked == "S") +
Title + Family + Age +
Boat.dibs,
data = df.train.batch,
trControl = cv.ctrl,
method = "glm",
metric = "ROC")
titanic.tune.9
summary(titanic.tune.9)
summary(titanic.tune.5)
set.seed(1234)
titanic.tune.f <- train(Fate ~ Boat.dibs + Class + Deck + I(Embarked == "S") +
Title + Family + Age,
data = df.train.batch,
trControl = cv.ctrl,
method = "glm",
metric = "ROC")
titanic.tune.f
summary(titanic.tune.f)
ggplot(data=df.train, aes(x=Survived)) +
geom_bar() +
ggtitle("Survived") +
scale_x_discrete(breaks=c(0, 1),
labels=c("Perished", "Survived"))
ggplot(data=df.train, aes(x=Pclass)) +
geom_bar(aes(fill=Survived), position="fill") +
ggtitle("Class")
ggplot(data=df.train, aes(x=Sex)) +
geom_bar(aes(fill=Sex)) +
ggtitle("Sex") +
facet_wrap(~Survived)
ggplot(data=df.train, aes(x=Age)) +
geom_histogram(aes(y=..density..), fill="blue", binwidth=1) +
geom_density() +
ggtitle("Age") +
facet_wrap(~Survived)
ggplot(data=df.train, aes(x=Fare, y=..count../sum(..count..))) +
geom_freqpoly(aes(color=Survived), binwidth=1)+
ggtitle("Fare") +
xlim(0, 100)
ggplot(data=df.train, aes(x=factor(SibSp))) +
geom_histogram(aes(y=..count..), fill="blue", binwidth=1) +
ggtitle("Sibling/Spouses Number") +
facet_wrap(~Survived)
ggplot(data=df.train, aes(x=factor(Parch+SibSp))) +
geom_histogram(aes(y=..count..), fill="blue", binwidth=1) +
ggtitle("Parents Number") +
facet_wrap(~Survived)
ggplot(data=df.train, aes(x=Embarked)) +
geom_bar(aes(fill=Survived), position="fill") +
ggtitle("Embarked Site")
ggplot(data=df.train.fe, aes(x=Deck)) +
geom_bar(aes(fill=Fate)) +
ggtitle("Deck")
ggplot(data=df.train.fe, aes(x=Side)) +
geom_bar(aes(fill=Fate)) +
ggtitle("Side")
ggplot(data=df.train.fe, aes(x=Side)) +
geom_bar(aes(fill=Fate), position="fill") +
ggtitle("Side")
ggplot(data=df.train, aes(x=Title, y=Age)) + geom_boxplot()
ggplot(data=df.train, aes(x=Title)) +
geom_bar(aes(fill=Survived), position="fill") +
ggtitle("Title")
ggplot(data=df.train, aes(x=Title)) +
geom_bar(aes(fill=Survived)) +
ggtitle("Title")
ggplot(data=df.train, aes(x=Title, y=Age)) + geom_boxplot()
unique(df.train$Title)
set.seed(1234)
titanic.tune.f <- train(Fate ~ Sex + Class + Deck + I(Embarked == "S") +
Title + Family + Age,
data = df.train.batch,
trControl = cv.ctrl,
method = "glm",
metric = "ROC")
titanic.tune.f
summary(titanic.tune.f)
set.seed(1234)
titanic.tune.6.1 <- train(Fate ~ Sex + Class + Deck +
I(Embarked == "S") +
# the female and young
I(Title %in% c("the Countess", "Ms", "Master", "Miss", "Mme", "Mlle", "Mrs", "Lady")) +
Family + Age,
data = df.train.batch,
trControl = cv.ctrl,
method = "glm",
metric = "ROC")
titanic.tune.6.1
summary(titanic.tune.6.1)
set.seed(1234)
titanic.tune.6.1 <- train(Fate ~ Class + Deck +
I(Embarked == "S") +
# the female and young
I(Title %in% c("the Countess", "Ms", "Master", "Miss", "Mme", "Mlle", "Mrs", "Lady")) +
Family + Age,
data = df.train.batch,
trControl = cv.ctrl,
method = "glm",
metric = "ROC")
titanic.tune.6.1
summary(titanic.tune.6.1)
set.seed(1234)
titanic.tune.6.1 <- train(Fate ~ Class + Deck +
I(Embarked == "S") +
# the female and young
I(Title %in% c("the Countess", "Ms", "Master", "Miss", "Mme", "Mlle", "Mrs", "Lady")) +
Family,
data = df.train.batch,
trControl = cv.ctrl,
method = "glm",
metric = "ROC")
titanic.tune.6.1
summary(titanic.tune.6.1)
ggplot(data=df.train.fe, aes(x=Deck)) +
geom_bar(aes(fill=Fate)) +
ggtitle("Deck")
ggplot(data=df.train.fe, aes(x=Deck)) +
geom_bar(aes(fill=Fate), position="fill") +
ggtitle("Deck")
summary(titanic.tune.6)
summary(titanic.tune.6.1)
summary(titanic.tune.5)
unique(df.train$Deck)
df.train.fe$Deck
titanic.tune.5.1 <- train(Fate ~ Sex + Class + I(Embarked == "S") + Title + Family + Age +
I(Deck %in% c("B", "C", "D", "E", "F")),
data = df.train.batch,
trControl = cv.ctrl,
method = "glm",
metric = "ROC")
titanic.tune.5.1
summary(titanic.tune.5.1)
set.seed(1234)
titanic.tune.5.1 <- train(Fate ~ Sex + Class + I(Embarked == "S") + Title + Family + Age +
I(Deck %in% c("B", "D", "E")),
data = df.train.batch,
trControl = cv.ctrl,
method = "glm",
metric = "ROC")
titanic.tune.5.1
summary(titanic.tune.5.1)
summary(titanic.tune.f)
set.seed(1234)
titanic.tune.5.1 <- train(Fate ~ Sex + Class + Deck +
I(Embarked == "S") + Family + Age +
I(Title == "Mr")
data = df.train.batch,
trControl = cv.ctrl,
method = "glm",
metric = "ROC")
titanic.tune.5.1
summary(titanic.tune.5.1)
summary(titanic.tune.6.1)
set.seed(1234)
titanic.tune.5.1 <- train(Fate ~ Sex + Class + Deck +
I(Embarked == "S") + Family + Age +
I(Title == "Mr") + Title,
data = df.train.batch,
trControl = cv.ctrl,
method = "glm",
metric = "ROC")
titanic.tune.5.1
summary(titanic.tune.5.1)
summary(df.train.batch)
set.seed(1234)
titanic.tune.5.1 <- train(Fate ~ Sex + Class + Deck +
I(Embarked == "S") + Family + Age +
I(Title == "Mr") +
I(Title == "Mr" & Class=="Third"),
data = df.train.batch,
trControl = cv.ctrl,
method = "glm",
metric = "ROC")
titanic.tune.5.1
summary(titanic.tune.5.1)
set.seed(1234)
titanic.tune.5.1 <- train(Fate ~ Class + Deck +
I(Embarked == "S") + Family + Age +
I(Title == "Mr") +
I(Title == "Mr" & Class=="Third"),
data = df.train.batch,
trControl = cv.ctrl,
method = "glm",
metric = "ROC")
titanic.tune.5.1
summary(titanic.tune.5.1)
ggplot(data=df.train, aes(x=Sex)) +
geom_bar(aes(fill=Sex)) +
ggtitle("Sex") +
facet_wrap(~Survived)
ggplot(data=df.train, aes(x=Sex)) +
geom_bar(aes(fill=Sex)) +
ggtitle("Sex") +
facet_grid(Class~Survived)
ggplot(data=df.train, aes(x=Sex)) +
geom_bar(aes(fill=Sex)) +
ggtitle("Sex") +
facet_grid(~Survived)
?facet_grid
ggplot(data=df.train, aes(x=Survived)) +
geom_bar() +
ggtitle("Survived") +
scale_x_discrete(breaks=c(0, 1),
labels=c("Perished", "Survived"))
ggplot(data=df.train, aes(x=Survived)) +
geom_bar() +
ggtitle("Survived") +
scale_x_discrete(breaks=c(0, 1),
labels=c("Perished", "Survived")) +
facet_grid(Pclass~Sex)
head(df.train.batch)
set.seed(1234)
titanic.tune.5.1 <- train(Fate ~ Sex + Class + Deck +
I(Embarked == "S") + Family + Age + Title +
I(Sex == "male" & Class=="First") +
I(Sex == "female" & Class=="Third"),
data = df.train.batch,
trControl = cv.ctrl,
method = "glm",
metric = "ROC")
titanic.tune.5.1
summary(titanic.tune.5.1)
rf.grid <- data.frame(.mtry = c(2, 3))
set.seed(35)
rf.tune <- train(Fate ~ Sex + Class + Deck +
I(Embarked == "S") + Family + Age + Title +
I(Sex == "male" & Class=="First") +
I(Sex == "female" & Class=="Third"),   ,
data = df.train.batch,
method = "rf",
metric = "ROC",
tuneGrid = rf.grid,
trControl = cv.ctrl)
library(randomForest)
set.seed(35)
rf.tune <- train(Fate ~ Sex + Class + Deck +
I(Embarked == "S") + Family + Age + Title +
I(Sex == "male" & Class=="First") +
I(Sex == "female" & Class=="Third"),
data = df.train.batch,
method = "rf",
metric = "ROC",
tuneGrid = rf.grid,
trControl = cv.ctrl)
rf.tune
titanic.tune.5.1
set.seed(1234)
svm.tune <- train(Fate ~ Sex + Class + Age + Family + Embarked,
data = df.train.batch,
method = "svmRadial",
tuneLength = 9,
preProcess = c("center", "scale"), # normalize data within resampling loops
metric = "ROC",
trControl = cv.ctrl)
svm.tune
set.seed(1234)
svm.tune <- train(Fate ~ Sex + Class + Deck +
I(Embarked == "S") + Family + Age + Title +
I(Sex == "male" & Class=="First") +
I(Sex == "female" & Class=="Third"),
data = df.train.batch,
method = "svmRadial",
tuneLength = 9,
preProcess = c("center", "scale"), # normalize data within resampling loops
metric = "ROC",
trControl = cv.ctrl)
warnings()
svm.tune
rf.tune
titanic.tune.1
dim(df.test.bath)
dim(df.test.batch)
glm.pred <- predict(titanic.tune.5.1, df.test.batch)
confusionMatrix(glm.pred, df.test.batch$Fate)
?confusionMatrix
install.packages("e1071")
confusionMatrix(glm.pred, df.test.batch$Fate)
rf.tune
rf.pred <- predict(rf.tune, df.test.batch)
confusionMatrix(rf.pred, df.test.batch$Fate)
svm.pred <- predict(svm.tune, df.test.batch)
confusionMatrix(svm.pred, df.test.batch$Fate)
glm.probs <- predict(titanic.tune.5.1, df.test.batch, type = "prob")
glm.probs
?roc
glm.ROC <- roc(response = df.test.batch$Fate,
predictor = glm.probs$Survived,
levels = levels(df.test.batch$Fate))
plot(glm.ROC, type="S")
rf.probs <- predict(rf.tune, df.test.batch, type = "prob")
rf.ROC <- roc(response = df.test.batch$Fate,
predictor = rf.probs$Survived,
levels = levels(df.test.batch$Fate))
plot(rf.ROC, add=TRUE, col="red")
svm.probs <- predict(svm.tune, df.test.batch, type = "prob")
svm.ROC <- roc(response = df.test.batch$Fate,
predictor = svm.probs$Survived,
levels = levels(df.test.batch$Fate))
svm.ROC <- roc(response = df.test.batch$Fate,
predictor = svm.probs$Survived,
levels = levels(df.test.batch$Fate))
plot(rf.ROC, add=TRUE, col="green")
svm.probs <- predict(svm.tune, df.test.batch, type = "prob")
svm.probs
rf.probs
plot(rf.ROC, add=TRUE, col="red")
svm.ROC <- roc(response = df.test.batch$Fate,
predictor = svm.probs$Survived,
levels = levels(df.test.batch$Fate))
plot(svm.ROC, add=TRUE, col="green")
cv.values <- resamples(list(Logit = titanic.tune.5.1,
RF = rf.tune, SVM = svm.tune))
dotplot(cv.values, metric = "ROC")
confusionMatrix(rf.pred, df.test.batch$Fate)
confusionMatrix(glm.pred, df.test.batch$Fate)
?dotplot
df.test$Title <- getTitle(df.test)
unique(df.test$Title)
unique(df.train$Title)
summary(df.test)
str(df.test)
str(df.train)
str(df.train.fe)
c("Mr", "Mrs") %in% levels(df.train$Title)
unique(df.test$Title) %in% levels(df.train$Title)
unique(df.test$Title)
levels(df.test$Title)
unique(df.train$Title)
df.test$Title <- changeTitles(df.test, c("Dona"), "Mrs")
## function for assigning a new title value to old title(s)
changeTitles <- function(data, old.titles, new.title) {
for (honorific in old.titles) {
data$Title[ which( data$Title == honorific)] <- new.title
}
return (data$Title)
}
df.test$Title <- changeTitles(df.test, c("Dona"), "Mrs")
unique(df.test$Title) %in% levels(df.train$Title)
missmap(df.test, col=c("yellow", "black"),
main="Missingness Map of Train Data",
legend=T)
install.packages("Hmisc")
library(Hmisc)
DF <- data.frame(age = c(10, 20, NA, 40), sex = c('male','female'))
# impute with mean value
DF$imputed_age <- with(DF, impute(age, mean))
# impute with random value
DF$imputed_age2 <- with(DF, impute(age, 'random'))
DF
?impute
missmap(df.test, col=c("yellow", "black"),
main="Missingness Map of Train Data",
legend=T)
?impute
bytitle.age.data
df.train %>%
group_by(Title) %>%
summarise(
mean.Age = mean(Age, na.rm=T),
median.Age = median(Age, na.rm=T),
n = n(),
n.na = sum(is.na(Age))) %>%
arrange(Title)
bytitle.age.data.test <- df.test %>%
group_by(Title) %>%
summarise(
mean.Age = mean(Age, na.rm=T),
median.Age = median(Age, na.rm=T),
n = n(),
n.na = sum(is.na(Age))) %>%
arrange(Title)
bytitle.age.data.test
title.na.groups <- bytitle.age.data.test$Title[which(bytitle.age.data.test$n.na > 0)]
title.na.groups
imputeMedian(df.test$Age, df.test$Title, title.na.groups)
imputeMedian <- function(impute.var, filter.var, var.levels) {
for (v in var.levels) {
impute.var[ which( filter.var == v)] <- impute(impute.var[
which( filter.var == v)], fun=median)
}
return (impute.var)
}
imputeMedian(df.test$Age, df.test$Title, title.na.groups)
df.test[is.na(df.test$Fare)]
df.test[is.na(df.test$Fare),]
is.na(df.test$Fare)
which(is.na(df.test$Fare))
df.test[which(is.na(df.test$Fare))]
df.test[which(is.na(df.test$Fare)),]
imputeMedian(df.test$Fare, df.test$Pclass, c(3))
imputeMedian(df.test$Fare, df.test$Pclass, c(3))[153]
median(df.test$Fare, na.rm=T)
median(df.test$Fare[df.test$Pclass==3], na.rm=T)
df.test$Fare <- imputeMedian(df.test$Fare, df.test$Pclass, c(3))
head(df.test)
df.test <- featureEng(df.test)
head(df.test)
str_sub(df.test$Cabin[1], -1)
isEven(str_sub(df.test$Cabin[1], -1))
isOdd(str_sub(df.test$Cabin[1], -1))
missmap(df.test, col=c("yellow", "black"),
main="Missingness Map of Train Data",
legend=T)
df.test$Age <- imputeMedian(df.test$Age, df.test$Title, title.na.groups)
summary(df.test)
df.test[is.na(df.test$Age),]
title.na.groups
df.test[df.test$Title=="Ms",]
df.test$Title <- changeTitles(df.test, c("Dona", "Ms"), "Mrs")
bytitle.age.data.test <- df.test %>%
group_by(Title) %>%
summarise(
mean.Age = mean(Age, na.rm=T),
median.Age = median(Age, na.rm=T),
n = n(),
n.na = sum(is.na(Age))) %>%
arrange(Title)
bytitle.age.data.test
title.na.groups <- bytitle.age.data.test$Title[which(bytitle.age.data.test$n.na > 0)]
df.test$Age <- imputeMedian(df.test$Age, df.test$Title, title.na.groups)
missmap(df.test, col=c("yellow", "black"),
main="Missingness Map of Train Data",
legend=T)
summary(df.test)
test.keeps <- train.keeps[-1]
test.keeps
head(df.test,1)
df.test.pred <- df.test[, test.keeps]
df.test.pred
?predict
rf.pred
predict(titanic.tune.5.1, df.test.pred)
Fate.pred <- predict(titanic.tune.5.1, df.test.pred)
Fate.pred
talbe(Fate.pred)
table(Fate.pred)
Fate.pred <- revalue(Fate.pred,  c("Perished" = 0, "Survived" = 1))
table(Fate.pred)
Prediction <- as.data.frame(Fate.pred)
df.test$PassengerId
dim(df.test)
dim(Prediction)
Prediction$PassengerId <- df.test$PassengerId
head(Prediction)
pwd()
?as.data.frame
colnames(Prediction)
colnames(Prediction) <- c("Survived", "PassengerId")
head(Prediction)
?write.csv
write.csv(Prediction[,c("PassengerId", "Survived")],
file="Titanic_predictions.csv", row.names=FALSE, quote=FALSE)
set.seed(1234)
rf.tune.2 <- train(Fate ~ Sex + Class + Age + Family + Embarked,
data = df.train.batch,
method = "rf",
metric = "ROC",
tuneGrid = rf.grid,
trControl = cv.ctrl)
rf.tune.2
rf.tune
set.seed(1234)
rf.tune.2 <- train(Fate ~ Sex + Class + Age + Family + Embarked + Title + Deck,
data = df.train.batch,
method = "rf",
metric = "ROC",
tuneGrid = rf.grid,
trControl = cv.ctrl)
rf.tune.2
rf.tune
rf.tune.2
cv.values <- resamples(list(Logit = titanic.tune.5.1,
RF = rf.tune, RF2=rf.tune.2))
dotplot(cv.values, metric = "ROC")
rf.tune
rf.tune.2
Fate.pred.rf <- predict(rf.tune, df.test.pred)
Fate.pred.rf <- revalue(Fate.pred.rf,  c("Perished" = 0, "Survived" = 1))
Prediction <- as.data.frame(Fate.pred.rf)
Prediction$PassengerId <- df.test$PassengerId]
colnames(Prediction) <- c("Survived", "PassengerId")
write.csv(Prediction[,c("PassengerId", "Survived")],
file="Titanic_predictions_rf.csv", row.names=FALSE, quote=FALSE)
colnames(Prediction) <- c("Survived", "PassengerId")
Prediction <- as.data.frame(Fate.pred.rf)
Prediction$PassengerId <- df.test$PassengerId]
Prediction$PassengerId <- df.test$PassengerId
colnames(Prediction) <- c("Survived", "PassengerId")
write.csv(Prediction[,c("PassengerId", "Survived")],
file="Titanic_predictions_rf.csv", row.names=FALSE, quote=FALSE)
